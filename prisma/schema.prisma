// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Room {
  id          String        @id @default(cuid())
  name        String        @db.VarChar(300)
  description String?       @db.Text
  creatorId   String        @map("creator_id")
  creator     User          @relation(fields: [creatorId], references: [id])
  createdAt   DateTime      @default(now()) @map("created_at")
  inviteCode  String        @unique @map("invite_code")
  sessions    RoomSession[]

  @@map("rooms")
}

model RoomSession {
  id           String               @id @default(cuid())
  roomId       String               @map("room_id")
  room         Room                 @relation(fields: [roomId], references: [id])
  startedAt    DateTime             @default(now()) @map("started_at")
  finishedAt   DateTime             @map("finished_at")
  participants SessionParticipant[]

  @@map("room_sessions")
}

model SessionParticipant {
  id        String      @id @default(cuid())
  userId    String      @map("user_id")
  user      User        @relation(fields: [userId], references: [id])
  sessionId String      @map("session_id")
  session   RoomSession @relation(fields: [sessionId], references: [id])
  role      SessionRole
  active    Boolean     @default(false)

  @@map("session_participants")
}

enum SessionRole {
  admin
  viewer

  @@map("session_role")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String               @id @default(cuid())
  name           String?
  email          String?              @unique
  emailVerified  DateTime?            @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  created_rooms  Room[]
  participations SessionParticipant[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
